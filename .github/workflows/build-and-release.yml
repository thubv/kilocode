name: Build and Release Extension

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: 20.19.2
  PNPM_VERSION: 10.8.1

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Create .env file
        run: echo "KILOCODE_POSTHOG_API_KEY=${{ secrets.POSTHOG_API_KEY || 'dummy-key' }}" >> .env

      - name: Build Extension
        run: |
          echo "Building extension..."
          pnpm build

          # Get package version and info
          current_package_version=$(node -p "require('./src/package.json').version")
          package_name=$(node -p "require('./src/package.json').name")

          echo "Built: $package_name v$current_package_version"
          echo "EXTENSION_VERSION=$current_package_version" >> $GITHUB_ENV
          echo "PACKAGE_NAME=$package_name" >> $GITHUB_ENV

          # Verify build
          if [ -f "bin/kilo-code-${current_package_version}.vsix" ]; then
            file_size=$(ls -lh bin/kilo-code-${current_package_version}.vsix | awk '{print $5}')
            echo "Extension built successfully (Size: $file_size)"
          else
            echo "Build failed - VSIX not found"
            exit 1
          fi
          
      - name: Upload Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ env.EXTENSION_VERSION }}
          path: bin/kilo-code-${{ env.EXTENSION_VERSION }}.vsix
          retention-days: 90
          
      - name: Create GitHub Release
        if: github.event.inputs.create_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release tag
          release_tag="build-${{ env.EXTENSION_VERSION }}-$(date +%Y%m%d-%H%M%S)"

          # Create release
          gh release create "$release_tag" \
            --title "Extension Build v${{ env.EXTENSION_VERSION }}" \
            --notes "Extension build from commit ${{ github.sha }}" \
            --target ${{ github.sha }} \
            bin/kilo-code-${{ env.EXTENSION_VERSION }}.vsix

          echo "Created release: $release_tag"
          echo "Download URL: https://github.com/${{ github.repository }}/releases/tag/$release_tag"
      - name: Create Build Summary
        run: |
          echo "## Extension Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package**: ${{ env.PACKAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ env.EXTENSION_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the Releases page for download links." >> $GITHUB_STEP_SUMMARY

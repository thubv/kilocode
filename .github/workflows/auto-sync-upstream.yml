name: Auto Sync Upstream

on:
  # Chạy hằng ngày lúc 9:00 sáng JST (00:00 UTC)
  schedule:
    - cron: '0 0 * * *'
  
  # Có thể trigger thủ công
  workflow_dispatch:
    inputs:
      upstream_repo:
        description: 'Upstream repository (owner/repo)'
        required: false
        default: 'Kilo-Org/kilocode'
        type: string
      target_branch:
        description: 'Target branch to sync'
        required: false
        default: 'main'
        type: string
      create_release:
        description: 'Create release after successful sync'
        required: false
        default: false
        type: boolean
      force_sync:
        description: 'Force sync even if conflicts exist (dangerous)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: 20.19.2
  PNPM_VERSION: 10.8.1
  UPSTREAM_REPO: ${{ github.event.inputs.upstream_repo || 'Kilo-Org/kilocode' }}
  TARGET_BRANCH: ${{ github.event.inputs.target_branch || 'main' }}

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    outputs:
      sync_success: ${{ steps.sync.outputs.success }}
      new_version: ${{ steps.version.outputs.version }}
      has_changes: ${{ steps.sync.outputs.has_changes }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Setup upstream remote
        run: |
          echo "Setting up upstream remote: ${{ env.UPSTREAM_REPO }}"
          git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git || true
          git remote set-url upstream https://github.com/${{ env.UPSTREAM_REPO }}.git
          git remote -v
          
      - name: Fetch upstream changes
        run: |
          echo "Fetching from upstream..."
          git fetch upstream
          git fetch upstream --tags
          
          # Kiểm tra có thay đổi mới không
          current_commit=$(git rev-parse HEAD)
          upstream_commit=$(git rev-parse upstream/${{ env.TARGET_BRANCH }})
          
          echo "Current commit: $current_commit"
          echo "Upstream commit: $upstream_commit"
          
          if [ "$current_commit" = "$upstream_commit" ]; then
            echo "No new changes from upstream"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "New changes detected from upstream"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        id: fetch
        
      - name: Check for merge conflicts
        if: steps.fetch.outputs.has_changes == 'true'
        run: |
          echo "Checking for potential merge conflicts..."
          
          # Thử merge dry-run để kiểm tra conflicts
          git checkout ${{ env.TARGET_BRANCH }}
          
          # Backup current state
          git branch backup-before-sync
          
          # Thử merge
          if git merge --no-commit --no-ff upstream/${{ env.TARGET_BRANCH }}; then
            echo "No conflicts detected"
            git merge --abort
            echo "conflicts=false" >> $GITHUB_OUTPUT
          else
            echo "Merge conflicts detected!"
            git merge --abort
            echo "conflicts=true" >> $GITHUB_OUTPUT
            
            # Lấy danh sách files có conflict
            git merge upstream/${{ env.TARGET_BRANCH }} || true
            conflicted_files=$(git diff --name-only --diff-filter=U | tr '\n' ',' | sed 's/,$//')
            git merge --abort
            
            echo "conflicted_files=$conflicted_files" >> $GITHUB_OUTPUT
          fi
        id: conflicts
        
      - name: Handle merge conflicts
        if: steps.conflicts.outputs.conflicts == 'true' && github.event.inputs.force_sync != 'true'
        run: |
          echo "Merge conflicts detected. Creating issue..."
          
          # Tạo issue về conflicts
          issue_body="## 🚨 Upstream Sync Conflict Detected
          
          **Upstream Repository**: ${{ env.UPSTREAM_REPO }}
          **Target Branch**: ${{ env.TARGET_BRANCH }}
          **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ### Conflicted Files:
          \`\`\`
          ${{ steps.conflicts.outputs.conflicted_files }}
          \`\`\`
          
          ### Next Steps:
          1. Manually resolve conflicts in the conflicted files
          2. Run the workflow again with \`force_sync: true\` if needed
          3. Or manually sync the upstream changes
          
          ### Commands to resolve manually:
          \`\`\`bash
          git fetch upstream
          git checkout ${{ env.TARGET_BRANCH }}
          git merge upstream/${{ env.TARGET_BRANCH }}
          # Resolve conflicts in the files above
          git add .
          git commit -m \"Resolve merge conflicts with upstream\"
          git push origin ${{ env.TARGET_BRANCH }}
          \`\`\`
          
          This issue was automatically created by the Auto Sync Upstream workflow."
          
          gh issue create \
            --title "🚨 Upstream Sync Conflicts - $(date '+%Y-%m-%d %H:%M')" \
            --body "$issue_body" \
            --label "upstream-sync,conflict,automated"
            
          echo "Issue created for merge conflicts"
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Perform upstream sync
        if: steps.fetch.outputs.has_changes == 'true' && (steps.conflicts.outputs.conflicts != 'true' || github.event.inputs.force_sync == 'true')
        run: |
          echo "Performing upstream sync..."
          
          git checkout ${{ env.TARGET_BRANCH }}
          
          # Merge upstream changes
          if git merge upstream/${{ env.TARGET_BRANCH }}; then
            echo "Merge successful!"
            echo "success=true" >> $GITHUB_OUTPUT
            
            # Push changes
            git push origin ${{ env.TARGET_BRANCH }}
            git push origin --tags
            
            echo "Pushed changes to origin"
          else
            echo "Merge failed!"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        id: sync
        
      - name: Get new version
        if: steps.sync.outputs.success == 'true'
        run: |
          version=$(node -p "require('./src/package.json').version")
          echo "New version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT
        id: version
        
      - name: Create sync summary
        if: steps.fetch.outputs.has_changes == 'true'
        run: |
          echo "## 🔄 Upstream Sync Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Upstream Repository**: ${{ env.UPSTREAM_REPO }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Branch**: ${{ env.TARGET_BRANCH }}" >> $GITHUB_STEP_SUMMARY
          echo "**Sync Status**: ${{ steps.sync.outputs.success == 'true' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "**New Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.sync.outputs.success }}" = "true" ]; then
            echo "### Changes Synced Successfully" >> $GITHUB_STEP_SUMMARY
            echo "- All upstream changes have been merged" >> $GITHUB_STEP_SUMMARY
            echo "- Version updated to ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- Ready for extension build" >> $GITHUB_STEP_SUMMARY
          fi

  build-extension:
    needs: sync-upstream
    if: needs.sync-upstream.outputs.sync_success == 'true' && needs.sync-upstream.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout updated code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Create .env file
        run: echo "KILOCODE_POSTHOG_API_KEY=${{ secrets.POSTHOG_API_KEY || 'dummy-key' }}" >> .env

      - name: Build Extension
        run: |
          echo "Building extension after upstream sync..."
          pnpm build

          # Get package info
          current_version=$(node -p "require('./src/package.json').version")
          package_name=$(node -p "require('./src/package.json').name")

          echo "Built: $package_name v$current_version"
          echo "EXTENSION_VERSION=$current_version" >> $GITHUB_ENV
          echo "PACKAGE_NAME=$package_name" >> $GITHUB_ENV

          # Verify build
          if [ -f "bin/kilo-code-${current_version}.vsix" ]; then
            file_size=$(ls -lh bin/kilo-code-${current_version}.vsix | awk '{print $5}')
            echo "Extension built successfully (Size: $file_size)"
          else
            echo "Build failed - VSIX not found"
            exit 1
          fi
          
      - name: Upload Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ env.EXTENSION_VERSION }}-upstream-sync
          path: bin/kilo-code-${{ env.EXTENSION_VERSION }}.vsix
          retention-days: 90
          
      - name: Create Release
        if: github.event.inputs.create_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release tag
          release_tag="upstream-sync-v${{ env.EXTENSION_VERSION }}-$(date +%Y%m%d-%H%M%S)"

          # Create release
          gh release create "$release_tag" \
            --title "🔄 Upstream Sync v${{ env.EXTENSION_VERSION }}" \
            --notes "Extension build after upstream sync from ${{ env.UPSTREAM_REPO }}

          **Changes**: Synced with upstream repository
          **Version**: ${{ env.EXTENSION_VERSION }}
          **Sync Date**: $(date '+%Y-%m-%d %H:%M:%S JST')
          **Commit**: ${{ github.sha }}
          
          This release was automatically created after successful upstream synchronization." \
            --target ${{ github.sha }} \
            bin/kilo-code-${{ env.EXTENSION_VERSION }}.vsix

          echo "Created release: $release_tag"
          
      - name: Create Build Summary
        run: |
          echo "## 🚀 Extension Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package**: ${{ env.PACKAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ env.EXTENSION_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Source**: Upstream sync from ${{ env.UPSTREAM_REPO }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Extension has been built and is ready for use!" >> $GITHUB_STEP_SUMMARY

  notify-completion:
    needs: [sync-upstream, build-extension]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      issues: write
      
    steps:
      - name: Notify completion
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ needs.sync-upstream.outputs.has_changes }}" = "false" ]; then
            echo "No changes from upstream - workflow completed successfully"
          elif [ "${{ needs.sync-upstream.outputs.sync_success }}" = "true" ]; then
            echo "Upstream sync and build completed successfully!"
            echo "New version: ${{ needs.sync-upstream.outputs.new_version }}"
          else
            echo "Upstream sync failed - check logs and issues for details"
          fi
